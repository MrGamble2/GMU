Script started on Sat 23 Apr 2016 08:06:27 PM EDT
[?1034hbash-4.1$ uname -a
Linux zeus-0 2.6.32-573.22.1.el6.centos.plus.x86_64 #1 SMP Wed Mar 23 17:51:43 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux
bash-4.1$ make clean all
rm -f ./obj/project3_sgamble2_207.o ./obj/set_sgamble2_207.o
gcc -g -W -O3  -I./include  -c src/project3_sgamble2_207.c -o obj/project3_sgamble2_207.o
gcc -g -W -O3  -I./include  -c src/set_sgamble2_207.c -o obj/set_sgamble2_207.o
gcc -g -W -O3  -I./include  -o bin/Project3_sgamble2_207 ./obj/project3_sgamble2_207.o ./obj/set_sgamble2_207.o
bash-4.1$ cat [C./pro[K[K[Ksrc [K/set_sgamble2[C[C[C[C[C[C[C[C[C_207
cat: ./src/set_sgamble2_207: No such file or directory
bash-4.1$ cat ./src/set_sgamble2_207[1P/src/set_sgamble2_207[C[C[C[C[C[C[C[C[C[C[C[C[C[C*/src/set_sgamble2_207[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
cat: */src/set_sgamble2_207: No such file or directory
bash-4.1$ cd src
bash-4.1$ cat d srcat */src/set_sgamble2_207[1Pset_sgamble2_207[1Pset_sgamble2_207[1Pset_sgamble2_207[1Pet_sgamble2_207[1Pset_sgamble2_207[1Pset_sgamble2_207[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1Pset_sgamble2_207[C[C[C[C[C[C[C[C[C[C[C[C[C set_sgamble2_207[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C.c
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "set_sgamble2_207.h"
set *createset()
{
        //creates w/ demalloc() a set, initilizes its fields and returns pointi
        set *newSet=NULL;
	newSet=dmalloc(sizeof(set));
	newSet->head=NULL;	
	newSet->count=0;
	return newSet;
}
void freed(set *s)
{
	node *ptr=s->head;
	node *hold=ptr;
	while(ptr!= NULL)
	{
		hold=ptr->next;
		free(ptr->data);
		free(ptr);
		ptr=hold;
	}
}
int insert(char *str, set *s)
{
        //places new string in the set by inserting new node into linked list and increments count. The toppings will be inserted into the pizza set in alphabetical order (use strcmpi() below for this). Duplicate strings (ignoring case) will not be allowed in the set. Returns whether the insertion was successful.
	node *newNode;
	newNode=dmalloc(sizeof(node));
	char *nStr=dmalloc(sizeof(char)*(strlen(str)));
	strcpy(nStr,str);
	newNode-> data=nStr;   //may by no *
	//dmalloc(1+(strlen(*str)*sizeof(char)));
	//check if head is null
	if(s->head==NULL)
	{
		s->head=newNode;
		s->count++;
		return 1;
	}
	//search
	node *iter=s->head;
	if(strcmpi(str, iter->data)<0)
	{
		newNode->next=iter;
		s->head=newNode;
		s->count++;
		return 1;
	}
	if(strcmpi(str, iter->data)==0)
	{
		return 0;	
	}
	int found=0;
	while(iter->next!=NULL)
	{
		if(strcmpi(str, iter->next->data)==0)
                {
                        return 0;
                }
		iter=iter->next;
	}
	iter=s->head;
	while(iter->next!=NULL && found!=1)
	{
		if(strcmpi(str, iter->next->data)>0)
		{
			iter=iter->next;
		}
		else if(strcmpi(str, iter->next->data)<0)
		{
			found=1;
		}
		else if(strcmpi(str, iter->next->data)==0)
		{
			return 0;
		}	
	}
	//insert after, check if head or tail
	newNode->next=iter->next;
	iter->next=newNode;
	s->count++;
	return 1;
}


void printset(set *s)
{
	//Displays the elements of the set with each string on a new line.
	node *ptr=s->head;
	while(ptr!=NULL)
	{
		//print next
		printf("%s",ptr->data);
		ptr=ptr->next;
	}		
}

/* compares strings for alphabetical ordering */
int strcmpi(char *s, char *t)
{
   while (*s && tolower(*s) == tolower(*t))
   {
      s++;
      t++;
   }
   return tolower(*s) - tolower(*t);
}

/* allocates memory with a check for successful allocation */
void *dmalloc(int size)
{
   void *p = malloc(size);
   if (!p)
   {
      printf("memory allocation failed\n");
      exit(1);
   }
   return p;
}

bash-4.1$ cat set_sgamble2_207.c[1P_sgamble2_207.c[1P_sgamble2_207.c[1P_sgamble2_207.cP_sgamble2_207.cr_sgamble2_207.co_sgamble2_207.c[1P_sgamble2_207.c[1P_sgamble2_207.c[1P_sgamble2_207.cp_sgamble2_207.cr_sgamble2_207.co_sgamble2_207.cj_sgamble2_207.ce_sgamble2_207.cc_sgamble2_207.ct_sgamble2_207.c3_sgamble2_207.c
#include <stdio.h>
#include <stdlib.h>
#include "set_sgamble2_207.h"
#include <string.h>
typedef struct deliverynode
{
   set *data;
   struct deliverynode *next;
} deliverynode;

void main()
{
	deliverynode *head;
        head=dmalloc(sizeof(deliverynode));
        head->next=NULL;
        head->data=NULL;
	while(1)
	{
		int x=0;
		char input[200];
		while(x==0)
		{
			printf("Do you wanna build a pizza? y/n\n");
			fflush(stdin);
			fflush(stdout);
			fgets(input, 200, stdin);
			if(strlen(input)==2)
			{
				if(input[0]=='y'){x=1;}
				if(input[0]=='n'){x=2;}
			}
			//empty string
			memset(input,0,strlen(input)-1);
		}
		if(x==1)
		{
			addPizza(&head);
		}
		if(x==2)
		{
			//print
			printf("Deliveries:\n");
			int loop=1;
			deliverynode *ptr= head;
			deliverynode *ptr2;
			while(ptr!=NULL)
			{
				printf("pizza %d has %d topping(s)\n", loop, ptr->data->count);
				printset(ptr->data);
				ptr2=ptr->next;
				freed(ptr->data);
				free(ptr->data);
				free(ptr);
				ptr=ptr2;
				loop++;
			}
			exit(1);	
		}
	}
}


int addPizza(deliverynode **head)
{
	set *newSet=createset();
	char input[200];
	int x=0;
	int test;
	while(x==0)
	{
		printf("please input topping\n");
		fgets(input, 200, stdin);
		if(strcmp(input,"\n")==0)
		{
			x=1;
			continue;
		}
		test=insert(input,newSet);
		if(test==0)
		{
			printf("could not add\n");
		}
		memset(input,0,strlen(input)-1);
	}
	if((*head)->data==NULL)
	{
		(*head)->data=newSet;
		return 1;
	}
	deliverynode *new=dmalloc(sizeof(deliverynode));
	new->data=newSet;
	new->next=*head;
	*head=new;		
}
bash-4.1$ cd ..
bash-4.1$ cd include
bash-4.1$ catd include..[Kat project3_sgamble2_207.c[5Pset_sgamble2_207.c[C[Kh
#ifndef SET_SGAMBLE2_207_H
#define SET_SGAMBLE2_207_H

typedef struct node
{
        char *data;
        struct node *next;
}node;

typedef struct
{
	node *head;
	int count;
}set;  

set *createset(void);
void freed(set *s);
int strcmpi(char *s,char *t);
void *dmalloc(int size);
int insert(char *str, set *s);
void printset(set *s);

#endif
bash-4.1$ cd ..
bash-4.1$ make
gcc -g -W -O3  -I./include  -c src/project3_sgamble2_207.c -o obj/project3_sgamble2_207.o
gcc -g -W -O3  -I./include  -o bin/Project3_sgamble2_207 ./obj/project3_sgamble2_207.o ./obj/set_sgamble2_207.o
bash-4.1$ cd bin
bash-4.1$ p[KProject3_sgamble2_207
Do you wanna build a pizza? y/n
y
please input topping
d
please input topping
s
please input topping
a
please input topping
b
please input topping

Do you wanna build a pizza? y/n
y
please input topping
cat
please input topping
dog
please input topping
bird
please input topping

Do you wanna build a pizza? y/n
y
please input topping
mouse  
please input topping
er
please input topping
tyyre
please input topping
dg
please input topping

Do you wanna build a pizza? y/n
n
Deliveries:
pizza 1 has 4 topping(s)
dg
er
mouse
tyyre
pizza 2 has 3 topping(s)
bird
cat
dog
pizza 3 has 4 topping(s)
a
b
d
s
bash-4.1$ Project3_sgamble2_207
Do you wanna build a pizza? y/n
y
please input topping
d
please input topping
d
could not add
please input topping
f
please input topping
f
could not add
please input topping
g
please input topping
g
could not add
please input topping

Do you wanna build a pizza? y/n
n
Deliveries:
pizza 1 has 3 topping(s)
d
f
g
bash-4.1$ exit

Script done on Sat 23 Apr 2016 08:11:51 PM EDT
